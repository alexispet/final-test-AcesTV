name: CI/CD
run-name: ${{ github.actor }} is running CI/CD

on: [push]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      statuses: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: '21.5.0'
      - uses: sibiraj-s/action-eslint@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # optional
          eslint-args: '--ignore-path=.gitignore --quiet'
          extensions: 'js,jsx,ts,tsx'
          annotations: true
          all-files: true


#  lighthouse:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Audit URLs using Lighthouse
#        uses: treosh/lighthouse-ci-action@v10
#        with:
#          urls: |
#            http://ec2-34-207-88-89.compute-1.amazonaws.com/
#          uploadArtifacts: true
#          temporaryPublicStorage: true
  test:
    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:11.2.2
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: user
          MYSQL_PASSWORD: password

    strategy:
      matrix:
        node-version: [20.x, 21.5.0]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/cache/restore@v3
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - run: npm ci
      - name: Run import script
        run: npm run db:import
        env:
          DB_HOST: localhost
          DB_USER: user
          DB_PASSWORD: password
          DB_DATABASE: testdb

      - name: Run tests
        run: npm run test

  dependency-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Run security audit
        run: npm audit --audit-level=high

  build-docker:
    needs: [test, dependency-audit]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/next

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

#  deploy-production:
#    needs: [build-docker]
#    if: github.ref_type == 'tag'
#    environment:
#        name: production
#        url: https://35.170.192.9:80
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#    steps:
#      - name: Deploy to server
#        uses: appleboy/ssh-action@master
#        with:
#            host: ${{ secrets.SSH_HOST }}
#            username: ${{ secrets.SSH_USER }}
#            key: ${{ secrets.SSH_KEY }}
#            port: ${{ secrets.SSH_PORT }}
#            script: cd prod && sudo docker compose -f docker-compose.prod.yml up --pull always -d
#
#  deploy-development:
#    needs: [ build-docker ]
#    if: github.ref_name == 'develop'
#    environment:
#      name: development
#      url: https://35.170.192.9:3000
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#    steps:
#      - name: Deploy to server
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SSH_HOST }}
#          username: ${{ secrets.SSH_USER }}
#          key: ${{ secrets.SSH_KEY }}
#          port: ${{ secrets.SSH_PORT }}
#          script: cd dev && sudo docker compose -f docker-compose.dev.yml up --pull always -d
